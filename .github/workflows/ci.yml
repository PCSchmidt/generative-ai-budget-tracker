# Template GitHub Actions Workflow for App Repositories
# Copy this to .github/workflows/ in each app repository

name: üöÄ App CI/CD + Portfolio Update

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  commit-lint:
    name: üîé Conventional Commit Lint
    runs-on: ubuntu-latest
    steps:
      - name: üèóÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: üì¶ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: üìë Commit Lint
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

  test-backend:
    runs-on: ubuntu-latest
    needs: [commit-lint]
    steps:
    - name: üèóÔ∏è Checkout
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: üì¶ Install Backend Dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: üß™ Run Backend Tests
      run: |
        cd backend
        pytest --cov=app --cov-report=term-missing

  test-frontend:
    runs-on: ubuntu-latest
    needs: [commit-lint]
    steps:
    - name: üèóÔ∏è Checkout
      uses: actions/checkout@v4
      
    - name: üì± Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: üì¶ Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: üß™ Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

  build-and-deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üèóÔ∏è Checkout
      uses: actions/checkout@v4
      
    - name: üöÄ Deploy to Production
      run: |
        echo "üöÄ Deploying app to production..."
        # Add your deployment commands here
        
    - name: üìä Update Portfolio Statistics
      if: success()
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: PCSchmidt/roadmap-for-building-generative-ai-apps
        event-type: app-updated
        client-payload: |
          {
            "app_name": "${{ github.repository }}",
            "status": "deployed",
            "timestamp": "${{ github.event.repository.updated_at }}",
            "workflow_run": "${{ github.run_id }}"
          }

  demo-update:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: üì∫ Update Live Demo
      run: |
        echo "üì∫ Updating live demo..."
        # Commands to update Hugging Face Spaces or other demo platforms
        
    - name: üéØ Notify Portfolio of Demo Update
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: PCSchmidt/roadmap-for-building-generative-ai-apps
        event-type: app-updated
        client-payload: |
          {
            "app_name": "${{ github.repository }}",
            "status": "demo_updated",
            "demo_url": "https://huggingface.co/spaces/pcschmidt/app-name",
            "timestamp": "${{ github.event.repository.updated_at }}"
          }

  # New job: only runs on tag pushes that start with v*
  tag-guard:
    name: üîè Validate Release Tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ commit-lint, test-backend, test-frontend ]
    runs-on: ubuntu-latest
    steps:
      - name: üèóÔ∏è Checkout
        uses: actions/checkout@v4
      - name: Extract tag
        id: tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Enforce semantic version pattern (vMAJOR.MINOR.PATCH)
        run: |
          TAG=${{ steps.tag.outputs.tag_name }}
          echo "Validating tag: $TAG"
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Tag '$TAG' invalid. Use vMAJOR.MINOR.PATCH (e.g. v0.4.0)"; exit 1; fi
          echo "‚úÖ Tag pattern OK"
      - name: Optional warning for major bump pre-1.0
        run: |
          TAG=${{ steps.tag.outputs.tag_name }}
          if [[ $TAG =~ ^v1\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ö†Ô∏è Major version 1 reached. Ensure readiness."; fi
      - name: Generate refined draft release notes from CHANGELOG
        id: notes
        env:
          TAG: ${{ steps.tag.outputs.tag_name }}
        run: |
          VERSION=${TAG#v}
          echo "Extracting notes for version $VERSION from CHANGELOG.md"
          if [ ! -f CHANGELOG.md ]; then echo "CHANGELOG.md missing"; exit 1; fi
          # Extract section between '## [VERSION]' and next '## ['
          NOTES=$(awk -v ver="[${VERSION}]" '/^## /{p=0} $0 ~ "^## \["ver"\]"{p=1} p' CHANGELOG.md | sed '1d')
          if [ -z "$NOTES" ]; then NOTES="No specific notes found. Update CHANGELOG.md."; fi
          # Save to file
          echo "$NOTES" > release_notes.md
          echo "notes_path=release_notes.md" >> $GITHUB_OUTPUT
      - name: Create or update GitHub draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ steps.tag.outputs.tag_name }}
          NOTES_FILE=${{ steps.notes.outputs.notes_path }}
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Updating existing draft release"
            gh release edit "$TAG" --draft --notes-file "$NOTES_FILE"
          else
            gh release create "$TAG" --draft --title "$TAG" --notes-file "$NOTES_FILE"
          fi
      - name: Summary
        run: echo "Tag guard + release notes prepared for ${{ steps.tag.outputs.tag_name }}"

  docker-backend:
    name: üê≥ Build & Push Backend Image
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ tag-guard ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: üèóÔ∏è Checkout
        uses: actions/checkout@v4
      - name: üè∑Ô∏è Extract tag components
        id: tag
        run: |
          RAW=${GITHUB_REF#refs/tags/}
          echo "raw=$RAW" >> $GITHUB_OUTPUT
          VER=${RAW#v}
          MAJOR=${VER%%.*}
          MINOR_PATCH=${VER#*.}
          MINOR=${MINOR_PATCH%%.*}
          echo "version=$VER" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
      - name: üîê Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: üõ†Ô∏è Build image
        run: |
          TAG=${{ steps.tag.outputs.raw }}
          VER=${{ steps.tag.outputs.version }}
          MAJOR=${{ steps.tag.outputs.major }}
          MINOR=${{ steps.tag.outputs.minor }}
          IMAGE_BASE=ghcr.io/${{ github.repository_owner }}/generative-ai-budget-tracker-backend
          docker build -f backend/Dockerfile -t $IMAGE_BASE:$VER -t $IMAGE_BASE:$MAJOR.$MINOR -t $IMAGE_BASE:$MAJOR backend
      - name: üì§ Push image tags
        run: |
          VER=${{ steps.tag.outputs.version }}
          MAJOR=${{ steps.tag.outputs.major }}
          MINOR=${{ steps.tag.outputs.minor }}
          IMAGE_BASE=ghcr.io/${{ github.repository_owner }}/generative-ai-budget-tracker-backend
          docker push $IMAGE_BASE:$VER
          docker push $IMAGE_BASE:$MAJOR.$MINOR
          docker push $IMAGE_BASE:$MAJOR
      - name: ‚úÖ Image summary
        run: echo "Pushed backend image tags for version ${{ steps.tag.outputs.version }}"
